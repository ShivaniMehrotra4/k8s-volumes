apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: storageclass-claim

spec:
  accessModes:
    - ReadWriteMany
  storageClassName: fast
  #can be fast | slow | any-name
  resources:
    requests:
      storage: 5Gi

---

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: fast
provisioner: kubernets.io/minikube-host

#Storage Classes have parameters that describe volumes belonging to the storage class.
#Different parameters may be accepted depending on the provisioner.
parameters:
  type: pd-standard
volumeBindingMode: Immediate


# Immediate: 
# This is where as soon as a PVC is created, volume binding & dynamic provisioning occurs.
# Disadvantage: here, for topological constraints like PVs that are not globally accessible
# to the other nodes in cluster, may have PVs bound without even scheduling details being known.
# Can result in unschedulable pods.

# WaitForFirstConsumer: 
# This will delay the volume binding and dynamic provisioning until a Pod that uses that 
# PVC is created.

#The following plugins support WaitForFirstConsumer with dynamic provisioning:

#     AWSElasticBlockStore
#     GCEPersistentDisk
#     AzureDisk

# The following plugins support WaitForFirstConsumer with pre-created PersistentVolume binding:

#     All of the above
#     Local